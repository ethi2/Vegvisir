<html>
<head>
<title>Caeser Cipher</title>
<style>
input
{
	margin-top:1px;
	margin-bottom:1px;
}
summary
{
	cursor:pointer;
}
</style>
</head>
<body>
<h3>Settings</h3>
<input value="abcdefghijklmnopqrstuvwxyz" size=60 id="txtAb"><br>
<input type=button value="Confirm alphabet" onclick=SetBet()>
<pre id="preAlog">No alphabet in use</pre>
<hr>
<h3>Encrypt/Decrypt</h3>
Shift index:<input type="number" min=0 value=0 id="numSi"><br>
<table border=1><tbody><tr><td valign="top">
Message:<textarea cols=50 rows=7 id="taM">The quick onyx goblin jumps over the lazy dwarf
Sphinx of black quartz, judge my vow
Pack my box with five dozen liquor jugs
Cozy lummox gives smart squid who asks for job pen
Amazingly few discotheques provide jukeboxes</textarea>
</td><td valign="top">
<input type=file id="finp"><br>
Format:<select id="selFormat">
<option value="utf-8">utf-8</option>
<option value="ibm866">ibm866</option>
<option value="iso-8859-2">iso-8859-2</option>
<option value="iso-8859-3">iso-8859-3</option>
<option value="iso-8859-4">iso-8859-4</option>
<option value="iso-8859-5">iso-8859-5</option>
<option value="iso-8859-6">iso-8859-6</option>
<option value="iso-8859-7">iso-8859-7</option>
<option value="iso-8859-8">iso-8859-8</option>
<option value="iso-8859-8-i">iso-8859-8-i</option>
<option value="iso-8859-10">iso-8859-10</option>
<option value="iso-8859-13">iso-8859-13</option>
<option value="iso-8859-14">iso-8859-14</option>
<option value="iso-8859-15">iso-8859-15</option>
<option value="iso-8859-16">iso-8859-16</option>
<option value="koi8-r">koi8-r</option>
<option value="koi8-u">koi8-u</option>
<option value="mac">mac</option>
<option value="iso-8859-11">iso-8859-11</option>
<option value="windows-1250">windows-1250</option>
<option value="windows-1251">windows-1251</option>
<option value="iso-8859-1">iso-8859-1</option>
<option value="windows-1253">windows-1253</option>
<option value="iso-8859-9">iso-8859-9</option>
<option value="windows-1255">windows-1255</option>
<option value="windows-1256">windows-1256</option>
<option value="windows-1257">windows-1257</option>
<option value="windows-1258">windows-1258</option>
<option value="x-mac-cyrillic">x-mac-cyrillic</option>
<option value="gb_2312-80">gb_2312-80</option>
<option value="gb18030">gb18030</option>
<option value="hz-gb-2312">hz-gb-2312</option>
<option value="big5-hkscs">big5-hkscs</option>
<option value="euc-jp">euc-jp</option>
<option value="iso-2022-jp">iso-2022-jp</option>
<option value="shift-jis">shift-jis</option>
<option value="iso-ir-149">iso-ir-149</option>
<option value="iso-2022-kr">iso-2022-kr</option>
<option value="utf-16be">utf-16be</option>
<option value="utf-16le">utf-16le</option>
</select><br>
<input type=button value="Load from file" onclick=loadFromFile()>
<pre id="preFlog"></pre>
</td></tr>
<tr><td valign="top">
<input type=button value="Encrypt" onclick=encrypt(true)> <input type=button value="Decrypt" onclick=encrypt(false)><br>
<span id="sClog"></span>
</td><td valign="top">
<input type=button value="Encrypt" onclick=cryptFile(true)> <input type=button value="Decrypt" onclick=cryptFile(false)><br>
<span id="sFElog"></span>
</td></tr></tbody></table>
<details><summary>Result</summary>
<input type=button value="Move result to input" onclick=movRes2Mes()>
<div style="background-color:#DADADA;" id="preEncRes"></div>
</details>
<script>
const DAlog = document.getElementById("preAlog");
const DAb = document.getElementById("txtAb");
const DSi = document.getElementById("numSi");
const DM = document.getElementById("taM");
const DEncRes = document.getElementById("preEncRes");
const DClog = document.getElementById("sClog");
const Dfinp = document.getElementById("finp");
const Dformatter = document.getElementById("selFormat");
const DFlog = document.getElementById("preFlog");
const DFElog = document.getElementById("sFElog");
let AbArray, FCArray;
function SetBet()
{
	if(!DAb)
	{
		alert("Alphabet input box not found");
		return;
	}
	const ABA = DAb.value.split("");
	for(let i=1;i<ABA.length;i++)
	{
		for(let j=0;j<i;j++)
		{
			if(ABA[i]==ABA[j])
			{
				alert(`Duplicate entry (${ABA[i]}) in alphabet`);
				return;
			}
		}
	}
	AbArray = ABA;
	DAlog.innerText = `Alphabet used:
${AbArray.toString()}
Length:${AbArray.length}`;
}
function movRes2Mes()
{
	DM.textContent = DEncRes.innerText;
}
function encrypt(mode)
{
	if(!Array.isArray(AbArray))
	{
		DClog.innerText = "No alphabet in use";
		return;
	}
	const ABL = AbArray.length;
	if(ABL <= 1)
	{
		DClog.innerText = `Alphabet not long enough (length=${ABL})`;
		return;
	}
	const nSi = parseInt(DSi.value);
	if(!(nSi>=0 && nSi<=ABL))
	{
		DClog.innerText = `Shift index (${nSi}) out of range`;
		return;
	}
	if(!DM)
	{
		DClog.innerText = "Message input box not found";
		return;
	}
	if(DM.value.length===0)
	{
		DClog.innerText = "Message empty";
		return;
	}
	const AC = makeShiftedArray(mode,nSi);
	const befM = DM.value.split("");
	buildAndShowString(befM,AC);
	DClog.innerText = `Text message ${mode?"en":"de"}crypted with Shift index ${nSi}`;
}
function loadFromFile()
{
	if(!Array.isArray(AbArray))
	{
		DFlog.innerText = "No alphabet in use";
		return;
	}
	if(Dfinp==null)
	{
		DFlog.innerText = "File picker not found";
		return;
	}
	if(Dfinp.files.length < 1)
	{
		DFlog.innerText = "No file picked";
		return;
	}

	Dfinp.files[0].arrayBuffer().then((daBuf) => {
		return new Uint8Array(daBuf);
	}).then((UFC) => {
		const TD = new TextDecoder(Dformatter.value).decode(UFC);
		FCArray = TD.split("");
		return UFC.length;
	}).then((L) => {
		DFlog.innerText = `${L} bytes read from file`;
	}).catch((error) => {
		console.log(error);
	});
}
function cryptFile(mode)
{
	if(!Array.isArray(AbArray))
	{
		DFElog.innerText = "No alphabet in use";
		return;
	}
	if(!Array.isArray(FCArray))
	{
		DFElog.innerText = "No file content loaded";
		return;
	}
	const ABL = AbArray.length;
	if(ABL <= 1)
	{
		DFElog.innerText = `Alphabet not long enough (length=${ABL})`;
		return;
	}
	const nSi = parseInt(DSi.value);
	if(!(nSi>=0 && nSi<=ABL))
	{
		DFElog.innerText = `Shift index (${nSi}) out of range`;
		return;
	}
	const AC = makeShiftedArray(mode,nSi);
	buildAndShowString(FCArray,AC);
	DFElog.innerText = `File content ${mode?"en":"de"}crypted with Shift index ${nSi}`;
}
function makeShiftedArray(d,s)
{
	const ABL = AbArray.length;
	const AC = new Array(ABL);
	for(let i=0;i<ABL;i++)//copy array
	{
		AC[i]=AbArray[i];
	}
	if(d)//shift array
	{
		for(let i=0;i<s;i++)
		{
			AC.push(AC.shift());
		}
	}
	else
	{
		for(let i=0;i<s;i++)
		{
			AC.unshift(AC.pop());
		}
	}
	return AC;
}
function buildAndShowString(beforeStArray,ShiftedArray)
{
	const BAL = beforeStArray.length;
/*
	const letterCounts = new Array(BAL);
	for(let i=0;i<BAL;i++)
	{letterCounts[i]=0;}
*/
	let afterString = "";
	for(let i=0;i<BAL;i++)
	{
		const t = AbArray.indexOf(beforeStArray[i]);
		if(t<0)
		{
			afterString = afterString.concat(beforeStArray[i]);
		}
		else
		{
			afterString = afterString.concat(ShiftedArray[t]);
			//letterCounts[t]++;
		}
	}
	DEncRes.innerText = afterString;
}
</script>
</body>
</html>
