// Author of question: Snorri Agnarsson
// Permalink of question: https://tinyurl.com/85dkfhdj

// Author of solution:    eti2
// Permalink of solution: https://tio.run/##zVXfa9tADH6O/wrBXtJmddqOwkiaQbe@DAYt68beBldbjm@279L7kRC6/O2ddGc7DWna14VAbN0n6dMn6ZKLQq2fnsZjuPKu1AZ0AQ8erZNaTeBOaWMkXM2VMNZqlRDuFk0jaqmqXWjp3MJOxmMn1dqbOs10M/54kVdFmf9Jkp34Vtc@OtEHnTzfC7tF/Ph8Hbx/WgRXIlDYRqicTQA5k4c739zkuT2xFdbotErzYs3n2kQUuSxkjf3vIbzTPYQzFfSQsv3GgG@zr/AeFmKOz6rVqfFq/C5QSQPVXyUqWGsPpVgil7LEPHgvjL6vsYGFdyFfiX2hQF9@vw4VdWneM2yOCo1wCAIWvUYkAYcBSV8Vg0nbUubXL1SIJ5@z0YfRxShN09Hw/FidnB2FkDLFNKb3DcsdyzXWARHJc1C@uUdj06TwKgv0Ws2GQC2RysFR@Em4gQYfvDRoyffTDE6Tx2CVBb3P6J2Dq2Diz2l4wtpib@pCMzsYQaCZbKKSpLigbNQZ0m7JPRBBur2yOJX6fZ4kpG8j4JbRe5xDSh41Eq5nzUqisp6fs1pQpy2UaNpcrUcEBFMUS5vG12JLjMR3xpP4LykSSm5T9NVGyseq1aulJeBe5@stAepQUciMHMN0qqVUGXYOcVh6UrH0HSbbLjwSK@eNmsImnOwoxApOWfMGaUfzbnra429aL7YitnEsDG2wHL1ZsmUG27r3z95WIYuEbDe0HVgqwtbED1YBzFsnaIBFXQeoo4Wxz8D7c1MY3ZByRRgyI@elSzv8d8y8sTz9pKnSjqPqFe0yjwxnasS6w/Jxxll3pWtDLLELSqmTgYUJaTRNBkthoOpeViXfPBVcgkoGOWYGBc@iOqmSgVQElbwKp3A5Y9CMUVvzjsbV0d5RdUxRHpPBIKSrRmeUMPKwLEUVBmCwSQbCWjSOMnBfDs9EX9h/Ohim41evX2sxj7ZU81cazPYO/UKDOQB1dH/PqKW0aVHiQ9LFtevaEAZy2t58X4tOGOaW0b8wZmHLVbzp466vJBFaaVOl7b3X@lzV9XBXTrqwmLyCv20jYDI5eBftg4P5sb@ydy8PqoGNm2Tz9PQP

// Use the command
//   dafny SumOdds-skeleton.dfy
// or
//   compile compile SumOdds-skeleton.dfy
// to compile the file.
// Or use the web page https://tio.run/#dafny.

// When you have solved the problem put
// the solution on the Dafny web page,
// generate a permalink and put it in
// this file.

// Compute 1+3+5+...+(2*n-1),
// i.e. the sum of the first n odd numbers.
function SumOdds( n: int ): int
    requires n >= 0
{
    if n == 0 then
        0
    else
        SumOdds(n-1) + 2*n-1
}

// We want to prove that
// 1+3+5+...+(2*n-1) == n^2

lemma ProveSumOdds( n: int )
    // Put requires and ensures clauses here that
    // ensure that the formula to prove is true.
    requires n >= 0
    ensures SumOdds(n) == n*n
{
    // Put a body here that suffices to convince
    // Dafny that the lemma is true.
    if n == 0 { return; }
    ProveSumOdds(n-1);
}

method ComputeSumOddsLoop( n: int ) returns (s: int)
    requires n >= 0
    ensures s == SumOdds(n)
    ensures s == n*n
{
    // Put a body here that computes the sum
    // in a loop where you add all the terms
    // in 1+3+5+...+(2*n-1) from left to right.
    // Recursion is not allowed and you may
    // not call ComputeSumOddsRecursive.
    //...
	s := 0;
	var k := 0;
	while k < n
	decreases n-k
	invariant 0 <= k <= n
	invariant s == SumOdds(k)
	invariant s == k*k
	{
		k := k+1;
		s := s+(2*k-1);
	}
	assert k == n;
}

method ComputeSumOddsRecursive( n: int ) returns (s: int)
    requires n >= 0
    ensures s == SumOdds(n)
    ensures s == n*n
{
    // Put a body here that computes the sum
    // recursively from left to right.
    // Looping is not allowed and you may not
    // call ComputeSumOddsLoop.
	if n == 0 { return 0; }
	s := ComputeSumOddsRecursive(n-1);
	s := s+2*n-1;
}

// If SumOdds is correct then this lemma will work.
lemma SumOddsAll()
    ensures forall n | n >= 0 :: SumOdds(n) == n*n
{
    forall n | n >= 0 
    {
        ProveSumOdds(n);
    }
}